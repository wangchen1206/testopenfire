<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<contextName>openfire-test</contextName>

	<!--application.yml 传递参数，不能使用logback 自带的<property>标签 -->
	<springProperty scope="context" name="logback.appname"
		source="logback.appname" />
	<springProperty scope="context" name="logback.logdir"
		source="logback.logdir" />

	<!-- 用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。 通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
	<!-- <property name="logback.logdir" value="C:\\Java\\log"/> <property name="logback.appname" 
		value="springboot"/> -->

	<!-- 控制台输出使用layout，文件输出使用encoder -->
	<!--输出到控制台 ConsoleAppender -->
	<appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
		<!--展示格式 layout -->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
		</layout>

		<!-- ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出 如果不用记得注释掉，不然你控制台会发现没日志~ -->
		<!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter"> <level>ERROR</level> 
			</filter> -->
	</appender>

	<!-- INFO级别的日志 -->
	<appender name="fileInfoLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 只输出info级别的日志 使用策略 避免输出Error的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<!-- 匹配到就允许 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 没有匹配到就禁止 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/info.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>

		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- WARN级别的日志 -->
	<appender name="fileWarnLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 只输出info级别的日志 使用策略 避免输出Error的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤ERROR -->
			<level>WARN</level>
			<!-- 匹配到就允许 -->
			<onMatch>ACCEPT</onMatch>
			<!-- 没有匹配到就禁止 -->
			<onMismatch>DENY</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/warn.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/warn.${logback.appname}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>

		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- Error级别的log -->
	<appender name="fileErrorLog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<!-- 因为Error级别相当于最高了 不需要设置 onMatch 和 onMisMatch 否则会报错 -->
			<level>ERROR</level>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天 
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${logback.logdir}/error.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<!--只保留最近90天的日志 -->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 -->
			<!--<totalSizeCap>1GB</totalSizeCap> -->
		</rollingPolicy>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!--指定最基础的日志输出级别 -->
	<root level="INFO">
		<!--appender将会添加到这个logger -->
		<appender-ref ref="consoleLog1" />
		<appender-ref ref="fileInfoLog" />
		<appender-ref ref="fileWarnLog" />
		<appender-ref ref="fileErrorLog" />
	</root>

	<!-- 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。 
		name:用来指定受此loger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, 
		WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。 
		addtivity:是否向上级loger传递打印信息。默认是true。 -->
	<!--logback.LogbackDemo：类的全路径 -->
	<!-- 在application.yml 中配置环境选择的配置 active:dev -->
	<!-- <springProfile name="test,dev"> <logger name="com.hp.controller.UserController" 
		level="WARN" additivity="false"> <appender-ref ref="consoleLog1"/> </logger> 
		</springProfile> <springProfile name="prod"> <logger name="com.hp.controller.UserController" 
		level="ERROR" additivity="false"> <appender-ref ref="consoleLog1"/> </logger> 
		</springProfile> -->
</configuration>